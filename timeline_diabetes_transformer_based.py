import plot_timeline_from_files
import os

# A function that transforms from the filename to a html link to where the user is directed when clicking on the graph
# The filenamne has the following format, where the last part is the URL for the text: 2005-08-04T14-31-00+02-00_%URL%_https__www.svt.se_nyheter_lokalt_vasterbotten_din-halsa-paverkas-av-farfars-matvanor.txt
def link_mapping(name):
    name = os.path.basename(name)
    url = name.split("_%URL%_")[1].replace("https__", "https://").replace("_", "/").replace(".txt", "")
    return url


order_colors = ["blue", "green", "red", "cyan", "violet",  "navy",   "orange",  "chartreuse", "chocolate", "chartreuse", "chocolate", "chartreuse", "chocolate"]
    
def do_plot():
    outputdir = "diabetes"
    label_length = 60
    hours_between_label_dates=2
    bar_transparency=0.7
    bar_width=0.1
    fontsize=7
    circle_scale_factor=200
    transparency_vertical_line=0.2
    width_vertical_line=0.2
        
    print("Start plotting")
    
    # These files have been generated by running "cluster_diabetes_news.py":
    label_file = "diabetes_svt/diabetes_cluster_labels.txt"
    texts_topics_file = "diabetes_svt/diabetes_clustered.txt"
    order_mapping_file_diabetes = "diabetes_svt/diabetes_high_level_clusters.txt"
    english_file = "diabetes_svt/english_labels.txt"
    
    file_name = "diabetes"
   
    # Make clickable HTML (because a link_mapping function is provided).
    # Use original Swedish topic labels
    timestamp_topics_dict = plot_timeline_from_files.make_plot_from_files(
        label_file,
        texts_topics_file,
        outputdir,
        file_name,
        label_length=label_length,
        hours_between_label_dates=hours_between_label_dates,
        bar_transparency=bar_transparency,
        bar_width=bar_width,
        fontsize=fontsize,
        use_separate_max_confidence_for_each_topic=False,
        circle_scale_factor=circle_scale_factor,
        link_mapping_func=link_mapping,
        order_mapping_file = order_mapping_file_diabetes,
        order_colors=order_colors,
        transparency_vertical_line=transparency_vertical_line,
        width_vertical_line=width_vertical_line)
    
    # Make a static pdf (because no link_mapping function is provided)
    # Use topic labels translated into English
    timestamp_topics_dict = plot_timeline_from_files.make_plot_from_files(
        english_file,
        texts_topics_file,
        outputdir,
        file_name,
        label_length=label_length,
        hours_between_label_dates=hours_between_label_dates,
        bar_transparency=bar_transparency,
        bar_width=bar_width,
        fontsize=fontsize,
        use_separate_max_confidence_for_each_topic=False,
        circle_scale_factor=circle_scale_factor,
        order_mapping_file = order_mapping_file_diabetes,
        order_colors=order_colors,
        transparency_vertical_line=0.15)
    
    # Make clickable HTML for only a part of the timeline (from 2020-01-01 to 2022-06-30)
    # Use topic labels translated into English
    timestamp_topics_dict = plot_timeline_from_files.make_plot_from_files(
        english_file,
        texts_topics_file,
        outputdir,
        file_name,
        label_length=label_length,
        hours_between_label_dates=4,
        bar_transparency=bar_transparency,
        bar_width=bar_width,
        fontsize=fontsize,
        use_separate_max_confidence_for_each_topic=False,
        circle_scale_factor=circle_scale_factor,
        order_mapping_file = order_mapping_file_diabetes,
        order_colors=order_colors,
        transparency_vertical_line=transparency_vertical_line,
        user_defined_min_timestamp="2020-01-01",
        user_defined_max_timestamp="2022-06-30",
        link_mapping_func=link_mapping,
        width_vertical_line=width_vertical_line)
    
do_plot()


